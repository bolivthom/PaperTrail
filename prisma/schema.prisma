
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String   @unique @db.VarChar(255)
  first_name  String?  @db.VarChar(100)
  last_name   String?  @db.VarChar(100)
  is_verified Boolean  @default(false)
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  // Relations
  receipts Receipt[]

  name          String?
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]

  @@map("users")
}

model Category {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @unique @db.VarChar(100)
  description String?
  created_at  DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  receipts Receipt[]

  @@map("categories")
}

model Receipt {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id         String   @db.Uuid
  company_name    String   @db.VarChar(255)
  company_address String?
  purchase_date   DateTime @db.Date
  sub_total       Decimal  @default(0.00) @db.Decimal(12, 2)
  tax_amount      Decimal  @default(0.00) @db.Decimal(12, 2)
  total_amount    Decimal  @db.Decimal(12, 2)
  currency        String   @default("JMD") @db.VarChar(10)
  notes           String?
  image_data      Bytes?
  image_mime_type String?  @db.VarChar(50)
  image_filename  String?  @db.VarChar(255)
  category_id     String?  @db.Uuid
  created_at      DateTime @default(now()) @db.Timestamptz(6)
  updated_at      DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  // Relations
  user     User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  category Category? @relation(fields: [category_id], references: [id], onDelete: SetNull)

  // Indexes
  @@index([user_id], map: "idx_receipts_user_id")
  @@index([purchase_date], map: "idx_receipts_date")
  @@index([company_name], map: "idx_receipts_company_name")
  @@index([total_amount], map: "idx_receipts_total_amount")
  @@map("receipts")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String  @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String    @db.Uuid
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}
